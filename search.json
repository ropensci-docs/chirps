[{"path":[]},{"path":"https://docs.ropensci.org/chirps/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"CONTRIBUTING","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://docs.ropensci.org/chirps/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"CONTRIBUTING","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://docs.ropensci.org/chirps/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"CONTRIBUTING","text":"recommend create Git branch pull request (PR). Look build status making changes. README contain badges continuous integration services used package. recommend tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s). See rOpenSci contributing guide details.","code":""},{"path":"https://docs.ropensci.org/chirps/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"CONTRIBUTING","text":"Please note chirps project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://docs.ropensci.org/chirps/CONTRIBUTING.html","id":"discussion-forum","dir":"","previous_headings":"","what":"Discussion forum","title":"CONTRIBUTING","text":"Check discussion forum think issue requires longer form discussion.","code":""},{"path":"https://docs.ropensci.org/chirps/CONTRIBUTING.html","id":"prefer-to-email","dir":"","previous_headings":"","what":"Prefer to Email?","title":"CONTRIBUTING","text":"Email person listed maintainer DESCRIPTION file repo. Though note private discussions email don’t help others - course email totally warranted ’s sensitive problem kind.","code":""},{"path":"https://docs.ropensci.org/chirps/CONTRIBUTING.html","id":"thanks-for-contributing","dir":"","previous_headings":"","what":"Thanks for contributing!","title":"CONTRIBUTING","text":"contributing guide adapted tidyverse contributing guide available https://raw.githubusercontent.com/r-lib/usethis/master/inst/templates/tidy-contributing.md","code":""},{"path":"https://docs.ropensci.org/chirps/articles/Overview.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Introduction to chirps","text":"chirps package (de Sousa et al. 2020) provides functionalities reproducible analysis using CHIRPS (Funk et al. 2015) CHIRTS data (Funk et al. 2019) . CHIRPS daily precipitation data set developed Climate Hazards Group high resolution precipitation gridded data. Spanning 50°S - 50°N (longitudes) ranging 1981 near-present (normally 45 day lag), CHIRPS incorporates 0.05 arc-degree resolution satellite imagery, -situ station data create gridded precipitation time series trend analysis seasonal drought monitoring. CHIRTS quasi-global (60°S – 70°N), high-resolution data set daily maximum minimum temperatures. functionalities chirps computation precipitation indices, retrieval evaporative stress index (ESI) describes temporal anomalies evapotranspiration produced weekly 0.25 arc-degree resolution entire globe, retrieval IMERG data provides near-real time global observations rainfall 0.5 arc-degree resolution.","code":""},{"path":"https://docs.ropensci.org/chirps/articles/Overview.html","id":"chirps-precipitation-data","dir":"Articles","previous_headings":"","what":"CHIRPS (precipitation data)","title":"Introduction to chirps","text":"Tapajós National Forest protected area Brazilian Amazon. Located within coordinates -55.4° -54.8°E -4.1° -2.7°S ~527,400 ha multiple Amazonian ecosystems. take three points within area get precipitation Jan-2013 Dec-2018 using get_chirps().  example fetch data server “ClimateSERV” using argument server = \"ClimateSERV\". option recommended working data points request faster. default server = \"CHC\" used multiple data points years.","code":"library(\"chirps\") library(\"sf\")  data(\"tapajos\", package = \"chirps\")  # sample three points within the Tapajos area set.seed(1234) tp_point <- st_sample(tapajos, 3)  # coerce as sf points tp_point <- st_as_sf(tp_point)  dat <- get_chirps(tp_point,                   dates = c(\"2013-01-01\",\"2018-12-31\"),                    server = \"ClimateSERV\") #> Fetching data from ClimateSERV #> Getting your request..."},{"path":"https://docs.ropensci.org/chirps/articles/Overview.html","id":"precipitation-indices","dir":"Articles","previous_headings":"CHIRPS (precipitation data)","what":"Precipitation indices","title":"Introduction to chirps","text":"default, function get_chirps() returns data.frame inherits classes ‘chirps’ ‘chirps_df’, id represents index rows -putted ‘object’. possible return data matrix using argument .matrix = TRUE. precip_indices() possible assess precipitation changes across time series using precipitation variability indices (Aguilar et al. 2005). , take indices intervals 15 days compute indices time series (Jan-2013 Dec-2018). function precip_indices() returns data.frame precipitation indices. date corresponds first day time series intervals defined argument ‘intervals’. timeseries = FALSE function returns single precipitation index entire time series.","code":"dat #>          id    lon   lat       date chirps #>       <int>  <dbl> <dbl>     <date>  <dbl> #> 1:        1 -55.03 -3.80 2013-01-01   0.00 #> 2:        1 -55.03 -3.80 2013-01-02  12.36 #> 3:        1 -55.03 -3.80 2013-01-03  24.72 #> 4:        1 -55.03 -3.80 2013-01-04   0.00 #> 5:        1 -55.03 -3.80 2013-01-05   0.00 #> ---                                        #> 6569:     3 -55.03 -3.41 2018-12-27   0.00 #> 6570:     3 -55.03 -3.41 2018-12-28   0.00 #> 6571:     3 -55.03 -3.41 2018-12-29   0.00 #> 6572:     3 -55.03 -3.41 2018-12-30   0.00 #> 6573:     3 -55.03 -3.41 2018-12-31   0.00 p_ind <- precip_indices(dat, timeseries = TRUE, intervals = 15)  p_ind #>          id       date    lon   lat  index  value #>       <int>     <date>  <dbl> <dbl>  <chr>  <dbl> #> 1:        1 2013-01-01 -55.03 -3.80   MLDS   7.00 #> 2:        1 2013-01-01 -55.03 -3.80   MLWS   2.00 #> 3:        1 2013-01-01 -55.03 -3.80  R10mm   1.00 #> 4:        1 2013-01-01 -55.03 -3.80  R20mm   3.00 #> 5:        1 2013-01-01 -55.03 -3.80 Rx1day  45.70 #> ---                                               #> 3446:     3 2018-12-16 -55.03 -3.41 Rx5day  53.90 #> 3447:     3 2018-12-16 -55.03 -3.41   R95p  34.53 #> 3448:     3 2018-12-16 -55.03 -3.41   R99p  34.53 #> 3449:     3 2018-12-16 -55.03 -3.41 Rtotal  80.49 #> 3450:     3 2018-12-16 -55.03 -3.41   SDII  13.42"},{"path":"https://docs.ropensci.org/chirps/articles/Overview.html","id":"chirts-temperature-data","dir":"Articles","previous_headings":"","what":"CHIRTS (temperature data)","title":"Introduction to chirps","text":"Maximum minimum temperature relative humidity data available function get_chirts(). Data requested server CHC default currently available 1983 2016. use random points Tapajós National Forest days speed call.","code":"dates <- c(\"2010-12-15\",\"2010-12-31\")  temp1 <- get_chirts(tp_point, dates, var = \"Tmax\", as.matrix = TRUE)  temp2 <- get_chirts(tp_point, dates, var = \"Tmin\", as.matrix = TRUE)  rhu <- get_chirts(tp_point, dates, var = \"RHum\", as.matrix = TRUE)"},{"path":[]},{"path":"https://docs.ropensci.org/chirps/articles/Overview.html","id":"evapotranspiration","dir":"Articles","previous_headings":"Going further","what":"Evapotranspiration","title":"Introduction to chirps","text":"chirps package also retrieves Evaporative Stress Index (ESI) using function get_esi() behaves similarly get_chirps(). function get_esi() may return NAs due cloudiness dataset. return error message: One way deal increase buffer area around -putted object argument dist passed st_buffer() sf(Pebesma 2018) ... functionality get_esi(). argument nQuadSegs defines number segments per quadrant buffer.","code":"dt <- get_esi(tp_point, c(\"2016-05-01\",\"2016-12-31\")) set.seed(123) lonlat <- data.frame(lon = runif(1, -55, -54),                      lat = runif(1, -3, -2.7))  get_esi(lonlat, c(\"2017-12-01\",\"2018-01-20\")) get_esi(lonlat, c(\"2017-12-01\",\"2018-01-20\"), dist = 0.1, nQuadSegs = 6)"},{"path":"https://docs.ropensci.org/chirps/articles/Overview.html","id":"objects-of-class-sf","dir":"Articles","previous_headings":"Going further","what":"Objects of class sf","title":"Introduction to chirps","text":"return object class (sf), argument .sf = TRUE used.","code":"get_chirps(tapajos, dates = c(\"2017-12-15\",\"2017-12-31\"), as.sf = TRUE)"},{"path":"https://docs.ropensci.org/chirps/articles/Overview.html","id":"objects-of-class-geojson","dir":"Articles","previous_headings":"Going further","what":"Objects of class geojson","title":"Introduction to chirps","text":"get_chirps() get_esi() also contains method objects class geojson geometries ‘Point’ ‘Polygon’. return object class (geojson), argument .geojson = TRUE used.","code":"tp_gjson <- sf_to_geojson(tp_point)  dt <- get_esi(tp_gjson, dates = c(\"2017-12-15\",\"2017-12-31\"), dist = 0.1)"},{"path":[]},{"path":"https://docs.ropensci.org/chirps/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kauê de Sousa. Author, maintainer. Adam H. Sparks. Author. Aniruddha Ghosh. Author. Pete Peterson. Contributor.            API Client implementation William Ashmall. Contributor.            API Client implementation Jacob van Etten. Thesis advisor. Svein Ø. Solberg. Thesis advisor.","code":""},{"path":"https://docs.ropensci.org/chirps/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kauê de Sousa Adam H. Sparks William Ashmall Jacob van Etten Svein Ø. Solberg (2020). chirps: API Client CHIRPS Precipitation Data R. Journal Open Source Software, 5(51), 2419, https://doi.org/10.21105/joss.02419","code":"@Article{,   title = {{chirps: API Client for the CHIRPS Precipitation Data in R}},   author = {Kauê {de Sousa} and Adam H. Sparks and William Ashmall and Jacob {van Etten} and Svein Ø. Solberg},   year = {2020},   doi = {10.21105/joss.02419},   journal = {The Journal of Open Source Software},   publisher = {The Open Journal},   volume = {5},   number = {51},   pages = {2419},   url = {https://doi.org/10.21105/joss.02419}, }"},{"path":[]},{"path":"https://docs.ropensci.org/chirps/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"API Client for CHIRPS and CHIRTS","text":"chirps provides API Client Climate Hazards Center ‘CHIRPS’ ‘CHIRTS’. ‘CHIRPS’ data quasi-global (50°S – 50°N) high-resolution (0.05 arc-degrees) rainfall data set, incorporates satellite imagery -situ station data create gridded rainfall time series trend analysis seasonal drought monitoring. ‘CHIRTS’ quasi-global (60°S – 70°N), high-resolution data set daily maximum minimum temperatures. details ‘CHIRPS’ ‘CHIRTS’ data please visit official home page https://www.chc.ucsb.edu/data.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/chirps/index.html","id":"from-cran","dir":"","previous_headings":"Quick start","what":"From CRAN","title":"API Client for CHIRPS and CHIRTS","text":"stable version available CRAN.","code":"install.packages(\"chirps\")"},{"path":"https://docs.ropensci.org/chirps/index.html","id":"from-github","dir":"","previous_headings":"Quick start","what":"From GitHub","title":"API Client for CHIRPS and CHIRTS","text":"development version may new features bug fixes available GitHub.","code":"library(\"remotes\")  install_github(\"ropensci/chirps\", build_vignettes = TRUE)"},{"path":"https://docs.ropensci.org/chirps/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"API Client for CHIRPS and CHIRTS","text":"Fetch CHIRPS data three points across Tapajós National Forest (Brazil) Jan-2017. default procedure download COG files CHIRPS server handle internally using package terra. interesting dealing hundreds points days. Data can returned matrix using argument .matrix = TRUE. faster download datapoints (~ 10 datapoints), argument server = \"ClimateSERV\" can used","code":"library(\"chirps\")  lonlat <- data.frame(lon = c(-55.0281,-54.9857, -55.0714),                      lat = c(-2.8094, -2.8756, -3.5279))  dates <- c(\"2017-01-01\", \"2017-01-31\")  dat <- get_chirps(lonlat, dates, server = \"CHC\", as.matrix = FALSE) library(\"chirps\")  lonlat <- data.frame(lon = c(-55.0281,-54.9857, -55.0714),                      lat = c(-2.8094, -2.8756, -3.5279))  dates <- c(\"2017-01-01\", \"2017-01-31\")  dat <- get_chirps(lonlat, dates, server = \"ClimateSERV\", as.matrix = FALSE)"},{"path":"https://docs.ropensci.org/chirps/index.html","id":"going-further","dir":"","previous_headings":"","what":"Going further","title":"API Client for CHIRPS and CHIRTS","text":"full functionality chirps illustrated package vignette. vignette can found package website within R package installed, e.g. via:","code":"vignette(\"Overview\", package = \"chirps\")"},{"path":"https://docs.ropensci.org/chirps/index.html","id":"use-of-chirps-data","dir":"","previous_headings":"","what":"Use of CHIRPS data","title":"API Client for CHIRPS and CHIRTS","text":"chirps redistribute data provide way, encourage users cite Funk et al. (2015) using CHIRPS Funk et al. (2019) using CHIRTS Funk C., Peterson P., Landsfeld M., … Michaelsen J. (2015). climate hazards infrared precipitation stations—new environmental record monitoring extremes. Scientific Data, 2, 150066. https://doi.org/10.1038/sdata.2015.66 Funk, C., Peterson, P., Peterson, S., … Mata, N. (2019). high-resolution 1983–2016 TMAX climate data record based infrared temperatures stations climate hazard center. Journal Climate, 32(17), 5639–5658. https://doi.org/10.1175/JCLI-D-18-0698.1","code":""},{"path":"https://docs.ropensci.org/chirps/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"API Client for CHIRPS and CHIRTS","text":"Please report issues bugs. License: MIT. Get citation information chirps R typing citation(package = \"chirps\"). welcome contribute chirps project. Please read contribution guidelines. Please note chirps project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://docs.ropensci.org/chirps/reference/as.geojson.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods to coerce geographical coordinates into a geojson polygon — as.geojson","title":"Methods to coerce geographical coordinates into a geojson polygon — as.geojson","text":"Take single points geographical coordinates coerce geojson geometry 'Polygon'","code":""},{"path":"https://docs.ropensci.org/chirps/reference/as.geojson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods to coerce geographical coordinates into a geojson polygon — as.geojson","text":"","code":"as.geojson(lonlat, dist = 1e-05, nQuadSegs = 2L, ...)  # S3 method for default as.geojson(lonlat, dist = 1e-05, nQuadSegs = 2L, ...)  # S3 method for sf as.geojson(lonlat, dist = 1e-05, nQuadSegs = 2L, ...)"},{"path":"https://docs.ropensci.org/chirps/reference/as.geojson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods to coerce geographical coordinates into a geojson polygon — as.geojson","text":"lonlat data.frame matrix geographical coordinates lonlat,  order, object class 'sf' geometry type 'POINT' 'POLYGON' dist numeric, buffer distance lonlat nQuadSegs integer, number segments per quadrant ... arguments passed sf methods","code":""},{"path":"https://docs.ropensci.org/chirps/reference/as.geojson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods to coerce geographical coordinates into a geojson polygon — as.geojson","text":"object class 'geosjon' row lonlat","code":""},{"path":"https://docs.ropensci.org/chirps/reference/as.geojson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods to coerce geographical coordinates into a geojson polygon — as.geojson","text":"","code":"if (FALSE) { # interactive() # Default S3 Method # random geographic points within bbox(10, 12, 45, 47) library(\"sf\")  set.seed(123) lonlat <- data.frame(lon = runif(1, 10, 12),                      lat = runif(1, 45, 47))  gjson <- as.geojson(lonlat)  #################  # S3 Method for objects of class 'sf' # random geographic points within bbox(10, 12, 45, 47) library(\"sf\")  set.seed(123) lonlat <- data.frame(lon = runif(5, 10, 12),                      lat = runif(5, 45, 47))  lonlat <- st_as_sf(lonlat, coords = c(\"lon\",\"lat\"))  gjson <- as.geojson(lonlat) }"},{"path":"https://docs.ropensci.org/chirps/reference/chirps.html","id":null,"dir":"Reference","previous_headings":"","what":"API Client for CHIRPS and CHIRTS — chirps","title":"API Client for CHIRPS and CHIRTS — chirps","text":"API Client Climate Hazards Center 'CHIRPS' 'CHIRTS'. 'CHIRPS' data quasi-global (50°S – 50°N) high-resolution (0.05 arc-degrees) rainfall data set, incorporates satellite imagery -situ station data create gridded rainfall time series trend analysis seasonal drought monitoring. 'CHIRTS' quasi-global (60°S – 70°N), high-resolution data set daily maximum minimum temperatures. details 'CHIRPS' 'CHIRTS' data please visit official home page https://www.chc.ucsb.edu/data.","code":""},{"path":"https://docs.ropensci.org/chirps/reference/chirps.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"API Client for CHIRPS and CHIRTS — chirps","text":"chirps redistribute data provide  way, encourage users cite Funk et al. (2015) using  CHIRPS Funk et al. (2019) using CHIRTS. Funk et al. (2015). Scientific Data, 2, 150066.  doi:10.1038/sdata.2015.66 Funk et al. (2019). Journal Climate, 32(17), 5639–5658.  doi:10.1175/JCLI-D-18-0698.1","code":""},{"path":[]},{"path":"https://docs.ropensci.org/chirps/reference/chirps.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"API Client for CHIRPS and CHIRTS — chirps","text":"Kauê de Sousa Adam H. Sparks Aniruddha Ghosh","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_chirps.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CHIRPS precipitation data — get_chirps","title":"Get CHIRPS precipitation data — get_chirps","text":"Get daily precipitation data \"Climate Hazards Group\". Two server   sources available. first, \"CHC\" (default) recommended   multiple data-points, \"ClimateSERV\" recommended   data-points required (~ 50).","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_chirps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CHIRPS precipitation data — get_chirps","text":"","code":"get_chirps(object, dates, server, ...)  # S3 method for default get_chirps(object, dates, server, as.matrix = FALSE, ...)  # S3 method for SpatVector get_chirps(object, dates, server = \"CHC\", as.raster = TRUE, ...)  # S3 method for SpatRaster get_chirps(   object,   dates,   server = \"CHC\",   as.matrix = TRUE,   as.raster = FALSE,   ... )  # S3 method for SpatExtent get_chirps(   object,   dates,   server = \"CHC\",   as.matrix = TRUE,   as.raster = FALSE,   ... )  # S3 method for sf get_chirps(object, dates, server, as.sf = FALSE, ...)  # S3 method for geojson get_chirps(object, dates, server, as.geojson = FALSE, ...)"},{"path":"https://docs.ropensci.org/chirps/reference/get_chirps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get CHIRPS precipitation data — get_chirps","text":"object input, object class data.frame (object can coerced data.frame), SpatVector,  SpatRaster, SpatExtent, sf geojson dates character start end dates order format \"YYYY-MM-DD\" server character represent server source \"CHC\" \"ClimateSERV\" ... additional arguments passed terra  sf methods See details .matrix logical, returns object class matrix .raster logical, returns object class SpatRaster .sf logical, returns object class sf .geojson logical, returns object class geojson","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_chirps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get CHIRPS precipitation data — get_chirps","text":"matrix, raster data frame CHIRPS data: id index rows object dates dates CHIRPS requested lon longitude provided object lat latitude provided object chirps CHIRPS value mm","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_chirps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get CHIRPS precipitation data — get_chirps","text":"Data description  https://data.chc.ucsb.edu/products/CHIRPS-2.0/README-CHIRPS.txt Additional arguments using server = \"CHC\" resolution: numeric, resolution CHIRPS tiles either   0.05 (default) 0.25 degrees Additional arguments using server = \"ClimateSERV\" dist: numeric, buffer distance object coordinate nQuadSegs: integer, number segments per buffer quadrant operation: supported operations ClimateSERV :","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_chirps.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get CHIRPS precipitation data — get_chirps","text":"get_chirps may return warning messages given  sf, please look sf documentation  possible issues.","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_chirps.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get CHIRPS precipitation data — get_chirps","text":"Funk C. et al. (2015). Scientific Data, 2, 150066.  doi:10.1038/sdata.2015.66","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_chirps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get CHIRPS precipitation data — get_chirps","text":"","code":"if (FALSE) { # interactive() library(\"chirps\") library(\"terra\")  # Case 1: return as a data.frame dates <- c(\"2017-12-15\",\"2017-12-31\") lonlat <- data.frame(lon = c(-55.0281,-54.9857), lat = c(-2.8094, -2.8756))  r1 <- get_chirps(lonlat, dates, server = \"CHC\")  # Case 2: return a matrix r2 <- get_chirps(lonlat, dates, server = \"CHC\", as.matrix = TRUE)  # Case 3: input SpatVector and return raster f <- system.file(\"ex/lux.shp\", package = \"terra\") v <- vect(f) r3 <- get_chirps(v, dates, server = \"CHC\", as.raster = TRUE)  # Case 4: input SpatExtent and return a raster within the extent area <- ext(c(-66, -64, -6, -4))  dates <- c(\"2017-12-15\", \"2017-12-31\")  r4 <- get_chirps(area, dates, server = \"CHC\")  # Case 5: using the server \"ClimateSERV\" r5 <- get_chirps(lonlat, dates, server = \"ClimateSERV\")  # Case 6: from \"ClimateSERV\" and return as a matrix r6 <- get_chirps(lonlat, dates, server = \"ClimateSERV\", as.matrix = TRUE)  }"},{"path":"https://docs.ropensci.org/chirps/reference/get_chirts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CHIRTS temperature data data — get_chirts","title":"Get CHIRTS temperature data data — get_chirts","text":"Get daily maximum minimum temperature data \"Climate Hazards  Group\". CHIRTS-daily global 2-m temperature product combines  monthly CHIRTSmax data set ERA5 reanalysis produce routinely  updated data support monitoring temperature extreme. Data  currently available 1983 2016. Soon available near-present.","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_chirts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CHIRTS temperature data data — get_chirts","text":"","code":"get_chirts(object, dates, var, ...)  # S3 method for default get_chirts(object, dates, var, as.matrix = FALSE, ...)  # S3 method for SpatVector get_chirts(object, dates, var, as.raster = TRUE, ...)  # S3 method for SpatRaster get_chirts(object, dates, var, as.raster = TRUE, ...)  # S3 method for SpatExtent get_chirts(object, dates, var, as.raster = TRUE, ...)"},{"path":"https://docs.ropensci.org/chirps/reference/get_chirts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get CHIRTS temperature data data — get_chirts","text":"object object class data.frame ( object can coerced data.frame), SpatExtent, SpatVector, SpatRaster dates character start end dates order format \"YYYY-MM-DD\" var character, valid variable options: “Tmax”, “Tmin”, “RHum” “HeatIndex” ... additional arguments passed terra .matrix logical, returns object class matrix .raster logical, returns object class SpatRaster","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_chirts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get CHIRTS temperature data data — get_chirts","text":"SpatRaster object .raster=TRUE, else matrix,  list, data.frame","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_chirts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get CHIRTS temperature data data — get_chirts","text":"Variable description  https://data.chc.ucsb.edu/products/CHIRTSdaily/aaa.Readme.txt Tmax Daily average maximum air temperature 2 m ground Tmin Daily average minimum air temperature 2 m ground RHum Daily average relative humidity HeatIndex Daily average heat index","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_chirts.html","id":"additional-arguments","dir":"Reference","previous_headings":"","what":"Additional arguments","title":"Get CHIRTS temperature data data — get_chirts","text":"interval: supported intervals “daily”, “pentad”,  “dekad”, “monthly”, “2-monthly”, “3-monthly”,  “annual”. Currently hard coded “daily”.","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_chirts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get CHIRTS temperature data data — get_chirts","text":"","code":"if (FALSE) { # interactive() library(\"chirps\") library(\"terra\")  # Case 1: input a data frame return a data frame in the long format dates <- c(\"2010-12-15\",\"2010-12-31\") lonlat <- data.frame(lon = c(-55.0281,-54.9857),                      lat = c(-2.8094, -2.8756))  temp1 <- get_chirts(lonlat, dates, var = \"Tmax\")  # Case 2: input a data frame return a matrix temp2 <- get_chirts(lonlat, dates, \"Tmax\", as.matrix = TRUE)  # Case 3: input a raster and return raster f <- system.file(\"ex/lux.shp\", package=\"terra\") v <- vect(f) temp3 <- get_chirts(v, dates, var = \"Tmax\", as.raster = TRUE)  # Case 4: input a raster and return raster temp4 <- get_chirts(v, dates, var = \"Tmax\", as.matrix = TRUE) }"},{"path":"https://docs.ropensci.org/chirps/reference/get_esi.html","id":null,"dir":"Reference","previous_headings":"","what":"Get evaporative stress index (ESI) data — get_esi","title":"Get evaporative stress index (ESI) data — get_esi","text":"Get evaporative stress index (ESI) SERVIR Global via ClimateSERV API Client. ESI available every four  (twelve) weeks 2001 present. dataset may contain cloudy data returned NAs. ClimateSERV works geojson type 'Polygon'. input object  transformed polygons small buffer area around point.","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_esi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get evaporative stress index (ESI) data — get_esi","text":"","code":"get_esi(object, dates, operation = 5, period = 1, ...)  # S3 method for default get_esi(object, dates, operation = 5, period = 1, ...)  # S3 method for sf get_esi(object, dates, operation = 5, period = 1, as.sf = FALSE, ...)  # S3 method for geojson get_esi(object, dates, operation = 5, period = 1, as.geojson = FALSE, ...)"},{"path":"https://docs.ropensci.org/chirps/reference/get_esi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get evaporative stress index (ESI) data — get_esi","text":"object input, object class data.frame (object can coerced data.frame), SpatVector,  SpatRaster, SpatExtent, sf geojson dates character start end dates order format \"YYYY-MM-DD\" operation optional, integer represents type statistical operation perform dataset period integer value period ESI data,  four weeks period = 1, twelve weeks = 2 ... additional arguments passed terra  sf methods See details .sf logical, returns object class sf .geojson logical, returns object class geojson","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_esi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get evaporative stress index (ESI) data — get_esi","text":"data frame ESI data: id index rows object dates dates ESI requested lon longitude provided object lat latitude provided object esi ESI value","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_esi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get evaporative stress index (ESI) data — get_esi","text":"operation: supported operations : dist: numeric, buffer distance object coordinate nQuadSegs: integer, number segments per buffer quadrant","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_esi.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get evaporative stress index (ESI) data — get_esi","text":"get_esi may return warning messages given  sf, please look sf documentation  possible issues.","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_esi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get evaporative stress index (ESI) data — get_esi","text":"","code":"if (FALSE) { # interactive()  lonlat <- data.frame(lon = c(-55.0281,-54.9857),                      lat = c(-2.8094, -2.8756))  dates <- c(\"2017-12-15\",\"2018-06-20\")  # by default the function set a very small buffer around the points # which can return NAs due to cloudiness in ESI data  dt <- get_esi(lonlat, dates = dates)  # the argument dist passed through sf increase the buffer area  dt <- get_esi(lonlat, dates = dates, dist = 0.1) }"},{"path":"https://docs.ropensci.org/chirps/reference/get_imerg.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Integrated Multisatellite Retrievals for GPM (IMERG) data — get_imerg","title":"Get Integrated Multisatellite Retrievals for GPM (IMERG) data — get_imerg","text":"IMERG dataset provides near-real time global observations   rainfall 10km resolution, can used estimate total  rainfall accumulation storm systems quantify intensity   rainfall flood impacts tropical cyclones storm   systems. IMERG daily precipitation dataset available 2015   present within latitudes 70 -70.","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_imerg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Integrated Multisatellite Retrievals for GPM (IMERG) data — get_imerg","text":"","code":"get_imerg(object, dates, operation = 5, ...)  # S3 method for default get_imerg(object, dates, operation = 5, ...)  # S3 method for sf get_imerg(object, dates, operation = 5, as.sf = FALSE, ...)  # S3 method for geojson get_imerg(object, dates, operation = 5, as.geojson = FALSE, ...)"},{"path":"https://docs.ropensci.org/chirps/reference/get_imerg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Integrated Multisatellite Retrievals for GPM (IMERG) data — get_imerg","text":"object input, object class data.frame (object can coerced data.frame), SpatVector,  SpatRaster, SpatExtent, sf geojson dates character start end dates order format \"YYYY-MM-DD\" operation optional, integer represents type statistical operation perform dataset ... additional arguments passed terra  sf methods See details .sf logical, returns object class sf .geojson logical, returns object class geojson","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_imerg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Integrated Multisatellite Retrievals for GPM (IMERG) data — get_imerg","text":"data frame imerg data: id index rows object dates dates imerg requested lon longitude provided object lat latitude provided object imerg IMERG value","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_imerg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Integrated Multisatellite Retrievals for GPM (IMERG) data — get_imerg","text":"operation: supported operations : dist: numeric, buffer distance object coordinate nQuadSegs: integer, number segments per buffer quadrant","code":""},{"path":"https://docs.ropensci.org/chirps/reference/get_imerg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Integrated Multisatellite Retrievals for GPM (IMERG) data — get_imerg","text":"","code":"if (FALSE) { # interactive() lonlat <- data.frame(lon = c(-55.0281,-54.9857),                      lat = c(-2.8094, -2.8756))  dates <- c(\"2017-12-15\", \"2017-12-31\")  dt <- get_imerg(lonlat, dates)  dt }"},{"path":"https://docs.ropensci.org/chirps/reference/precip_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute precipitation indices over a time series. — precip_indices","title":"Compute precipitation indices over a time series. — precip_indices","text":"Compute precipitation indices time series.","code":""},{"path":"https://docs.ropensci.org/chirps/reference/precip_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute precipitation indices over a time series. — precip_indices","text":"","code":"precip_indices(object, timeseries = FALSE, intervals = NULL)"},{"path":"https://docs.ropensci.org/chirps/reference/precip_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute precipitation indices over a time series. — precip_indices","text":"object object class chirps provided get_chirps timeseries logical, FALSE single point time series observation TRUE time series based intervals intervals integer lower 5, days intervals timeseries = TRUE","code":""},{"path":"https://docs.ropensci.org/chirps/reference/precip_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute precipitation indices over a time series. — precip_indices","text":"dataframe precipitation indices: MLDS maximum length consecutive dry day, rain < 1 mm (days) MLWS maximum length consecutive wet days, rain >= 1 mm (days) R10mm number heavy precipitation days 10 >= rain < 20 mm (days) R20mm number heavy precipitation days rain >= 20 (days) Rx1day maximum 1-day precipitation (mm) Rx5day maximum 5-day precipitation (mm) R95p total precipitation rain > 95th percentile (mm) R99p total precipitation rain > 99th percentile (mm) Rtotal total precipitation (mm) wet days, rain >= 1 (mm) SDII simple daily intensity index, total precipitation divided  number wet days (mm/days)","code":""},{"path":"https://docs.ropensci.org/chirps/reference/precip_indices.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute precipitation indices over a time series. — precip_indices","text":"Aguilar E., et al. (2005). Journal Geophysical Research, 110(D23), D23107. Kehel Z., et al. (2016). : Applied Mathematics Omics Assess Crop  Genetic Resources Climate Change Adaptive Traits (eds Bari ., Damania  . B., Mackay M., Dayanandan S.), pp. 151–174. CRC Press.","code":""},{"path":"https://docs.ropensci.org/chirps/reference/precip_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute precipitation indices over a time series. — precip_indices","text":"","code":"if (FALSE) { # interactive() lonlat <- data.frame(lon = c(-55.0281,-54.9857),                      lat = c(-2.8094, -2.8756))  dates <- c(\"2017-12-15\", \"2017-12-31\")  dt <- get_chirps(lonlat, dates, server = \"ClimateSERV\")  # take the indices for the entire period precip_indices(dt, timeseries = FALSE)  # take the indices for periods of 7 days precip_indices(dt, timeseries = TRUE, intervals = 7) }"},{"path":"https://docs.ropensci.org/chirps/reference/tapajos.html","id":null,"dir":"Reference","previous_headings":"","what":"Tapajos National Forest — tapajos","title":"Tapajos National Forest — tapajos","text":"Geometries Tapajos National Forest, protected  area Brazilian Amazon","code":""},{"path":"https://docs.ropensci.org/chirps/reference/tapajos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tapajos National Forest — tapajos","text":"","code":"tapajos"},{"path":"https://docs.ropensci.org/chirps/reference/tapajos.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tapajos National Forest — tapajos","text":"object class 'sfc_POLYGON' within bounding box  xmin: -55.41127 ymin: -4.114584  xmax: -54.7973 ymax: -2.751706","code":""},{"path":"https://docs.ropensci.org/chirps/reference/tapajos.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Tapajos National Forest — tapajos","text":"data provided Chico Mendes Institute via https://www.protectedplanet.net/en","code":""},{"path":[]},{"path":"https://docs.ropensci.org/chirps/news/index.html","id":"enhacements-0-1-4-001","dir":"Changelog","previous_headings":"","what":"ENHACEMENTS","title":"chirps 0.1.4.001 (2022-01-15)","text":"Methods objects class “SpatExtent” get_chirps() get_chirts() return raster within given area","code":""},{"path":"https://docs.ropensci.org/chirps/news/index.html","id":"chirps-014-2022-01-13","dir":"Changelog","previous_headings":"","what":"chirps 0.1.4 (2022-01-13)","title":"chirps 0.1.4 (2022-01-13)","text":"CRAN release: 2022-01-13","code":""},{"path":"https://docs.ropensci.org/chirps/news/index.html","id":"enhancements-0-1-4","dir":"Changelog","previous_headings":"","what":"ENHANCEMENTS","title":"chirps 0.1.4 (2022-01-13)","text":"Add new function get_chirts() fetch temperature data CHC server (https://data.chc.ucsb.edu/products/CHIRTSdaily/v1.0/global_cogs_p05/) Implement data fetching CHC server get_chirps() offers better alternative requests multiple data points using GoC files CHC server (https://data.chc.ucsb.edu/products/CHIRPS-2.0/global_daily/cogs/) terra package New S3 methods get_chirps() objects class ‘SpatVector’ ‘SpatRaster’ terra package Data can returned object class ‘matrix’ using argument .matrix = TRUE S3 methods objects class ‘default’, ‘SpatVector’ ‘SpatRaster’ Updates URL request data ClimateSERV","code":""},{"path":"https://docs.ropensci.org/chirps/news/index.html","id":"changes-in-behaviour-0-1-4","dir":"Changelog","previous_headings":"","what":"CHANGES IN BEHAVIOUR","title":"chirps 0.1.4 (2022-01-13)","text":"New argument server = added indicate server function send request, either ‘CHC’ ‘ClimateSERV’. Please use argument server = \"ClimateSERV\" backward compatibility previous versions package. API requests ClimateSERV use package httr instead curl Argument operation = get_chirps() required server = \"ClimateSERV\" Updates function .geojson() matches new requirements ClimateSERV","code":""},{"path":"https://docs.ropensci.org/chirps/news/index.html","id":"chirps-013-2021-07-10","dir":"Changelog","previous_headings":"","what":"chirps 0.1.3 (2021-07-10)","title":"chirps 0.1.3 (2021-07-10)","text":"GitHub version ongoing updates changes behaviour.","code":""},{"path":"https://docs.ropensci.org/chirps/news/index.html","id":"chirps-012-2020-07-12","dir":"Changelog","previous_headings":"","what":"chirps 0.1.2 (2020-07-12)","title":"chirps 0.1.2 (2020-07-12)","text":"CRAN release: 2020-07-13 Add citation info JOSS paper Fix vignette build S3 method .geojson() added replace functions data.frame_to_geojson() sf_to_geojson()","code":""},{"path":"https://docs.ropensci.org/chirps/news/index.html","id":"chirps-010-2020-07-01","dir":"Changelog","previous_headings":"","what":"chirps 0.1.0 (2020-07-01)","title":"chirps 0.1.0 (2020-07-01)","text":"CRAN release: 2020-07-03 rOpenSci release version","code":""},{"path":"https://docs.ropensci.org/chirps/news/index.html","id":"enhancements-0-1-0","dir":"Changelog","previous_headings":"","what":"ENHANCEMENTS","title":"chirps 0.1.0 (2020-07-01)","text":"Add get_imerg() fetch IMERG data https://disasters.nasa.gov/instruments/imerg","code":""},{"path":[]},{"path":"https://docs.ropensci.org/chirps/news/index.html","id":"changes-in-behaviour-0-0-8","dir":"Changelog","previous_headings":"","what":"CHANGES IN BEHAVIOUR","title":"chirps 0.0.8 (2020-05-22)","text":"Remove Imports pkg ‘tibble’ basically provide “cool” print method. new print() method added objects inherits class ‘chirps_df’ Pkg ‘methods’ moved Imports Depends Comments/suggestions given Jake Zwart rOpenSci pkg review added","code":""},{"path":[]},{"path":"https://docs.ropensci.org/chirps/news/index.html","id":"enhancements-0-0-6","dir":"Changelog","previous_headings":"","what":"ENHANCEMENTS","title":"chirps 0.0.6 (2020-01-29)","text":"Comments/suggestions given Claudia Vitolo rOpenSci pkg review added dataframe_to_geojson(), sf_to_geojson() added exported functions avoiding chirps::: documentation tapajos given avoiding chirps:::","code":""},{"path":[]},{"path":"https://docs.ropensci.org/chirps/news/index.html","id":"enhancements-0-0-5","dir":"Changelog","previous_headings":"","what":"ENHANCEMENTS","title":"chirps 0.0.5 (2020-01-09)","text":"Fix comments given good practice goodpractice::gp(). Avoid long code lines, bad readability. Avoid 1:length(…), 1:nrow(…), 1:ncol(…), 1:NROW(…) 1:NCOL(…) expressions. import packages whole, can cause name clashes imported packages.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/chirps/news/index.html","id":"new-features-0-0-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"chirps 0.0.4 (2020-01-03)","text":"S3 methods objects class “geojson” get_chirps() get_esi() Package vignette Prepare submission ropensci","code":""},{"path":"https://docs.ropensci.org/chirps/news/index.html","id":"enhancements-0-0-4","dir":"Changelog","previous_headings":"","what":"ENHANCEMENTS","title":"chirps 0.0.4 (2020-01-03)","text":"Validations internal functions transform ‘sf’ geojson Add properties features geojson output get_chirps() get_esi() via .add_geojson_properties()","code":""},{"path":[]},{"path":"https://docs.ropensci.org/chirps/news/index.html","id":"new-features-0-0-3","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"chirps 0.0.3 (2019-12-31)","text":"get_esi added retrieve Evaporative Stress Index S3 methods “data.frame” “sf” S3 methods objects class “data.frame” “sf” get_chirps","code":""},{"path":"https://docs.ropensci.org/chirps/news/index.html","id":"changes-in-behaviour-0-0-3","dir":"Changelog","previous_headings":"","what":"CHANGES IN BEHAVIOUR","title":"chirps 0.0.3 (2019-12-31)","text":".get_request_progress condition added check progress large requests prevent function fail. .GET added general function retrieve datasets ClimateSERV improvements internal functions documentation","code":""},{"path":[]},{"path":"https://docs.ropensci.org/chirps/news/index.html","id":"new-features-0-0-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"chirps 0.0.2 (2019-12-05)","text":"Calculate precipitation indices precip_indices time span","code":""},{"path":"https://docs.ropensci.org/chirps/news/index.html","id":"chirps-001-2019-12-03","dir":"Changelog","previous_headings":"","what":"chirps 0.0.1 (2019-12-03)","title":"chirps 0.0.1 (2019-12-03)","text":"GitHub-release prototype package.","code":""}]
